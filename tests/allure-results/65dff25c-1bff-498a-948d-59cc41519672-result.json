{"name": "Проверка https://dev-api.getprime.pro/api/v1/orders/create - Max lengths and gift-false", "status": "failed", "statusDetails": {"message": "AssertionError: Статус код не 200\nassert 200 == 201\n +  where 200 = <Response [200]>.status_code", "trace": "self = <test_api.TestApiGet object at 0x000001F5793113A0>\n\n    @pytest.mark.apitest\n    @allure.title(\"Проверка https://dev-api.getprime.pro/api/v1/orders/create - Max lengths and gift-false\")\n    @allure.description(\"Позитивная проверка полей максимально заполненными символами и gift false\")\n    def test_certificate_max_lenght_and_gift_false(self):\n        url_create_order = os.getenv(\"url_create_order\")\n        headers = {\n            \"Authorization\": f\"Bearer {access_token_frontend}\",\n            \"Content-Type\": \"application/json\"\n        }\n    \n        # Выбираем один случайный face_uuid\n        selected_face_uuid = random.choice(face_uuids)\n    \n        payload = {\n            \"buyer\": {\n                \"name\": \"Иван Иванов\",\n                \"email\": \"ivanov@example.com\",\n                \"phone\": \"+79991112233\"\n            },\n            \"order_certificates\": [\n                {\n                    \"design_uuid\": \"542f8ec8-75d1-46ce-8a07-6dfbbebc8581\",\n                    \"face_uuid\": selected_face_uuid,  # выбранный случайный uuid\n                    \"is_gift\": 'true',\n                    \"send_now\": 'true',\n                    \"timezone_code\": \"MSK\",\n                    \"sender\": \"Иванов Иван Иванович\",\n                    \"message\": \"С днём рождения!\",\n                    \"delivery_time\": \"2024-01-09T11:50:26+00:00\",\n                    \"recipient_name\": \"Алексей\",\n                    \"recipient_phone\": \"+79992223344\",\n                    \"recipient_email\": \"ivanov@example.com\",\n                    \"count\": 1\n                }\n            ]\n        }\n        print(selected_face_uuid)\n        response = requests.post(url_create_order, json=payload, headers=headers)\n>       assert response.status_code == 201, \"Статус код не 200\"\nE       AssertionError: Статус код не 200\nE       assert 200 == 201\nE        +  where 200 = <Response [200]>.status_code\n\ntest_api.py:594: AssertionError"}, "description": "Позитивная проверка полей максимально заполненными символами и gift false", "attachments": [{"name": "stdout", "source": "80d9334f-4807-408f-8418-e86f358f6e3d-attachment.txt", "type": "text/plain"}], "start": 1753934031420, "stop": 1753934032205, "uuid": "481055fb-91a0-41c9-a6b8-e5d0d6d431c1", "historyId": "06286d2e874924acc9bae00835771520", "testCaseId": "06286d2e874924acc9bae00835771520", "fullName": "tests.test_api.TestApiGet#test_certificate_max_lenght_and_gift_false", "labels": [{"name": "tag", "value": "apitest"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_api"}, {"name": "subSuite", "value": "TestApiGet"}, {"name": "host", "value": "Robotek3000"}, {"name": "thread", "value": "1636-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_api"}]}