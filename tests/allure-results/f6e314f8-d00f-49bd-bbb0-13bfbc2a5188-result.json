{"name": "Проверка Проверка https://dev-api.getprime.pro/api/v1/certificates/catalog - TG-service", "status": "broken", "statusDetails": {"message": "requests.exceptions.MissingSchema: Invalid URL 'None': No scheme supplied. Perhaps you meant https://None?", "trace": "self = <test_api.TestApiGet object at 0x0000019A52345E80>\n\n    @pytest.mark.apitest\n    @allure.title(\"Проверка Проверка https://dev-api.getprime.pro/api/v1/certificates/catalog - TG-service\")\n    @allure.description(\"валидная проверка catalog с ролью tg_service\")\n    def test_certificate_catalog_tg_service(self):\n        url_service_catalog = os.getenv(\"url_service_catalog\")\n        with allure.step(f\"Проверка {url_service_catalog} на 200\"):\n>           assert requests.get(url=url_service_catalog, headers={\"Authorization\": f\"Bearer {access_token_tg}\"}).status_code == 200, \"Статус кода не 200\"\n\ntest_api.py:178: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\venv\\lib\\site-packages\\requests\\api.py:73: in get\n    return request(\"get\", url, params=params, **kwargs)\n..\\venv\\lib\\site-packages\\requests\\api.py:59: in request\n    return session.request(method=method, url=url, **kwargs)\n..\\venv\\lib\\site-packages\\requests\\sessions.py:575: in request\n    prep = self.prepare_request(req)\n..\\venv\\lib\\site-packages\\requests\\sessions.py:484: in prepare_request\n    p.prepare(\n..\\venv\\lib\\site-packages\\requests\\models.py:367: in prepare\n    self.prepare_url(url, params)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <PreparedRequest [GET]>, url = 'None', params = OrderedDict()\n\n    def prepare_url(self, url, params):\n        \"\"\"Prepares the given HTTP URL.\"\"\"\n        #: Accept objects that have string representations.\n        #: We're unable to blindly call unicode/str functions\n        #: as this will include the bytestring indicator (b'')\n        #: on python 3.x.\n        #: https://github.com/psf/requests/pull/2238\n        if isinstance(url, bytes):\n            url = url.decode(\"utf8\")\n        else:\n            url = str(url)\n    \n        # Remove leading whitespaces from url\n        url = url.lstrip()\n    \n        # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n        # `data` etc to work around exceptions from `url_parse`, which\n        # handles RFC 3986 only.\n        if \":\" in url and not url.lower().startswith(\"http\"):\n            self.url = url\n            return\n    \n        # Support for unicode domain names and paths.\n        try:\n            scheme, auth, host, port, path, query, fragment = parse_url(url)\n        except LocationParseError as e:\n            raise InvalidURL(*e.args)\n    \n        if not scheme:\n>           raise MissingSchema(\n                f\"Invalid URL {url!r}: No scheme supplied. \"\n                f\"Perhaps you meant https://{url}?\"\n            )\nE           requests.exceptions.MissingSchema: Invalid URL 'None': No scheme supplied. Perhaps you meant https://None?\n\n..\\venv\\lib\\site-packages\\requests\\models.py:438: MissingSchema"}, "description": "валидная проверка catalog с ролью tg_service", "steps": [{"name": "Проверка None на 200", "status": "broken", "statusDetails": {"message": "requests.exceptions.MissingSchema: Invalid URL 'None': No scheme supplied. Perhaps you meant https://None?\n", "trace": "  File \"C:\\Users\\Qasquad1\\PycharmProjects\\GetPrime\\tests\\test_api.py\", line 178, in test_certificate_catalog_tg_service\n    assert requests.get(url=url_service_catalog, headers={\"Authorization\": f\"Bearer {access_token_tg}\"}).status_code == 200, \"Статус кода не 200\"\n  File \"C:\\Users\\Qasquad1\\PycharmProjects\\GetPrime\\venv\\lib\\site-packages\\requests\\api.py\", line 73, in get\n    return request(\"get\", url, params=params, **kwargs)\n  File \"C:\\Users\\Qasquad1\\PycharmProjects\\GetPrime\\venv\\lib\\site-packages\\requests\\api.py\", line 59, in request\n    return session.request(method=method, url=url, **kwargs)\n  File \"C:\\Users\\Qasquad1\\PycharmProjects\\GetPrime\\venv\\lib\\site-packages\\requests\\sessions.py\", line 575, in request\n    prep = self.prepare_request(req)\n  File \"C:\\Users\\Qasquad1\\PycharmProjects\\GetPrime\\venv\\lib\\site-packages\\requests\\sessions.py\", line 484, in prepare_request\n    p.prepare(\n  File \"C:\\Users\\Qasquad1\\PycharmProjects\\GetPrime\\venv\\lib\\site-packages\\requests\\models.py\", line 367, in prepare\n    self.prepare_url(url, params)\n  File \"C:\\Users\\Qasquad1\\PycharmProjects\\GetPrime\\venv\\lib\\site-packages\\requests\\models.py\", line 438, in prepare_url\n    raise MissingSchema(\n"}, "start": 1752829758807, "stop": 1752829758807}], "start": 1752829758807, "stop": 1752829758808, "uuid": "9f765746-392e-41b7-b946-f713da0658e3", "historyId": "c57756b5fd52ecbfab7e6126e5680793", "testCaseId": "c57756b5fd52ecbfab7e6126e5680793", "fullName": "tests.test_api.TestApiGet#test_certificate_catalog_tg_service", "labels": [{"name": "tag", "value": "apitest"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_api"}, {"name": "subSuite", "value": "TestApiGet"}, {"name": "host", "value": "Robotek3000"}, {"name": "thread", "value": "1812-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_api"}]}