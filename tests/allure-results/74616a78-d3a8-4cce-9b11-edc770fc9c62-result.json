{"name": "Проверка https://dev-api.getprime.pro/api/v1/orders/create - Check face uuid", "status": "broken", "statusDetails": {"message": "TypeError: Object of type ellipsis is not JSON serializable", "trace": "self = <test_api.TestApiGet object at 0x00000262CD190040>\n\n    @pytest.mark.apitest\n    @allure.title(\"Проверка https://dev-api.getprime.pro/api/v1/orders/create - Check face uuid\")\n    @allure.description(\"Позитивная проверка создания сертификата с отсроченной доставкой\")\n    def test_certificate_send_later(self):\n        url_create_order = os.getenv(\"url_create_order\")\n        face_uuids = [...]  # ваш массив UUID\n    \n        headers = {\n            \"Authorization\": f\"Bearer {access_token_frontend}\",\n            \"Content-Type\": \"application/json\"\n        }\n    \n        for face_uuid in face_uuids:\n            payload = {\n                \"buyer\": {\n                    \"name\": \"Иван Иванов\",\n                    \"email\": \"ivanov@example.com\",\n                    \"phone\": \"+79991112233\"\n                },\n                \"order_certificates\": [\n                    {\n                        \"design_uuid\": \"542f8ec8-75d1-46ce-8a07-6dfbbebc8581\",\n                        \"face_uuid\": face_uuid,  # передаем по одному uuid\n                        \"amount\": 10000,\n                        \"is_gift\": 'true',\n                        \"send_now\": 'true',\n                        \"timezone_code\": \"MSK\",\n                        \"sender\": \"Иванов Иван Иванович\",\n                        \"message\": \"С днём рождения!\",\n                        \"delivery_time\": \"2024-01-09T11:50:26+00:00\",\n                        \"recipient_name\": \"Алексей\",\n                        \"recipient_phone\": \"+79992223344\",\n                        \"recipient_email\": \"ivanov@example.com\",\n                        \"count\": 1\n                    }\n                ]\n            }\n    \n>           response = requests.post(url_create_order, json=payload, headers=headers)\n\ntest_api.py:542: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\venv\\lib\\site-packages\\requests\\api.py:115: in post\n    return request(\"post\", url, data=data, json=json, **kwargs)\n..\\venv\\lib\\site-packages\\requests\\api.py:59: in request\n    return session.request(method=method, url=url, **kwargs)\n..\\venv\\lib\\site-packages\\requests\\sessions.py:575: in request\n    prep = self.prepare_request(req)\n..\\venv\\lib\\site-packages\\requests\\sessions.py:484: in prepare_request\n    p.prepare(\n..\\venv\\lib\\site-packages\\requests\\models.py:370: in prepare\n    self.prepare_body(data, files, json)\n..\\venv\\lib\\site-packages\\requests\\models.py:510: in prepare_body\n    body = complexjson.dumps(json, allow_nan=False)\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python39\\lib\\json\\__init__.py:234: in dumps\n    return cls(\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python39\\lib\\json\\encoder.py:199: in encode\n    chunks = self.iterencode(o, _one_shot=True)\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python39\\lib\\json\\encoder.py:257: in iterencode\n    return _iterencode(o, 0)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.encoder.JSONEncoder object at 0x00000262CD193550>, o = Ellipsis\n\n    def default(self, o):\n        \"\"\"Implement this method in a subclass such that it returns\n        a serializable object for ``o``, or calls the base implementation\n        (to raise a ``TypeError``).\n    \n        For example, to support arbitrary iterators, you could\n        implement default like this::\n    \n            def default(self, o):\n                try:\n                    iterable = iter(o)\n                except TypeError:\n                    pass\n                else:\n                    return list(iterable)\n                # Let the base class default method raise the TypeError\n                return JSONEncoder.default(self, o)\n    \n        \"\"\"\n>       raise TypeError(f'Object of type {o.__class__.__name__} '\n                        f'is not JSON serializable')\nE       TypeError: Object of type ellipsis is not JSON serializable\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python39\\lib\\json\\encoder.py:179: TypeError"}, "description": "Позитивная проверка создания сертификата с отсроченной доставкой", "start": 1753847233263, "stop": 1753847233263, "uuid": "0f2d628a-8439-4b76-9f4f-2f50af9cdbc3", "historyId": "ebe0ce9901c9f4c1bf61aca86b38b4a2", "testCaseId": "ebe0ce9901c9f4c1bf61aca86b38b4a2", "fullName": "tests.test_api.TestApiGet#test_certificate_send_later", "labels": [{"name": "tag", "value": "apitest"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_api"}, {"name": "subSuite", "value": "TestApiGet"}, {"name": "host", "value": "Robotek3000"}, {"name": "thread", "value": "4100-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_api"}]}